/*
For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.

A binary tree X is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.

Given the roots of two binary trees root1 and root2, return true if the two trees are flip equivelent or false otherwise.
*/
var flipEquiv = function(root1, root2) {
    function traverse(node1,node2){
        if(!node1 && !node2){
            return true;
        }
        if(!node1 || !node2){
            return false;
        }
        if(node1.val !== node2.val){
            return false;
        }
        return (traverse(node1.left, node2.left) && traverse(node1.right, node2.right))||(traverse(node1.left, node2.right) && traverse(node1.right, node2.left))
    }
    return traverse(root1,root2)
};
