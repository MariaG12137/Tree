/*
We run a preorder depth first search on the root of a binary tree.

At each node in this traversal, we output D dashes (where D is the depth of this node), then we output the value of this node.  (If the depth of a node is D, the depth of its immediate child is D+1.  The depth of the root node is 0.)

If a node has only one child, that child is guaranteed to be the left child.

Given the output S of this traversal, recover the tree and return its root.
*/
var recoverFromPreorder = function(S) {
    S = S+'-';
    let num = false;
    let temp = '';
    let SArray = [];
    for(let s of S){
        if(s==='-'){
            if(num===true){
                num=false;
                SArray.push(parseInt(temp));
                temp=''
            }
            SArray.push(s);
        }else{
            if(num===false){
                num=true;
            }
            temp+=s;
        }
    }
    
    function build(array,level){
        if(array.length === 0){
            return null;
        }
        let node = new TreeNode(array.shift());
        
        let p1 = null;
        let p2 = array.length;
        let dash = 0;
     
        for(let i=0; i<array.length;i++){
            if(array[i]==='-'){
                dash+=1;
            }else{
                if(dash===level+1){
                    p1 === null?p1=i:p2=i;
                }
                dash = 0;
            }
        }
        if(p1){
            node.left = build(array.slice(p1,p2),level+1);
            node.right = build(array.slice(p2,array.length),level+1);
        }
 
        return node;
    }
    return build(SArray,0);

};
